{"version":3,"sources":["service.ts","App.tsx","index.tsx"],"names":["urlBase64ToUint8Array","key","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","run","a","navigator","console","log","serviceWorker","register","process","scope","registration","pushManager","getSubscription","current","unsubscribe","subObject","userVisibleOnly","applicationServerKey","subscribe","subscription","axios","post","headers","response","data","alert","getRegistration","currentReg","currentSub","App","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"iRAKMA,EAAwB,SAACC,GAO7B,IANA,IACMC,GAAUD,EADA,IAAIE,QAAQ,EAAKF,EAAIG,OAAS,GAAM,IACrBC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAE1DC,EAAUC,OAAOC,KAAKN,GACtBO,EAA0B,IAAIC,WAAWJ,EAAQF,QAE9CO,EAAI,EAAGA,EAAIL,EAAQF,SAAUO,EACpCF,EAAYE,GAAKL,EAAQM,WAAWD,GAEtC,OAAOF,GAIII,EAAG,sCAAG,kCAAAC,EAAA,0DAEb,kBAAmBC,WAFN,iCAIbC,QAAQC,IAAI,8BAJC,SAMcF,UAAUG,cAAcC,SAAxB,UAEtBC,GAFsB,cAGzB,CAAEC,MAAO,MATE,cAMPC,EANO,gBAYSA,EAAaC,YAAYC,kBAZlC,YAYPC,EAZO,0CAaMA,EAAQC,cAbd,eAgBPC,EAAY,CAChBC,iBAAiB,EACjBC,qBAAsB7B,EAlC5B,4FAgBiB,UAqBcsB,EAAaC,YAAYO,UAAUH,GArBjD,eAqBPI,EArBO,OAsBbf,QAAQC,IAAI,mBAEZD,QAAQC,IAAI,gBAxBC,UA0BPe,IAAMC,KACV,sCACAF,EACA,CACEG,QAAS,CACP,eAAgB,sBA/BT,QAmCblB,QAAQC,IAAI,uBAnCC,kDAsCbD,QAAQC,IAAR,MACI,KAAEkB,UAAY,KAAEA,SAASC,MAAMpB,QAAQC,IAAI,KAAEkB,SAASC,MAvC7C,kCAyCR,GAzCQ,kCA2CV,GA3CU,wDAAH,qDA8CHC,EAAK,sCAAG,8BAAAvB,EAAA,qEAEMC,UAAUG,cAAcoB,kBAF9B,YAEbC,EAFa,wCAKTA,EAAWhB,YAAYC,kBALd,+CAMf,GANe,aAIbgB,EAJa,wCASXR,IAAMC,KAAK,kCAAmCO,EAAY,CAC9DN,QAAS,CACP,eAAgB,sBAXH,kCAcV,GAdU,kCAgBZ,GAhBY,0CAAH,qDCnDHO,EAVO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,SAASC,QAAS,kBAAMN,MAA1C,WCFNO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAGjDlC,M","file":"static/js/main.6747683f.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst publicKey =\n  'BDobnNEiUBJkBUeIYLW3JDyKsCQRHPLYnVqr11XJl5DWPgZhSF0q5FDygK1YEjBTOTiN_gLyEbMWnRVAvKfsi78'\n\nconst urlBase64ToUint8Array = (key: string): Uint8Array => {\n  const padding = '='.repeat((4 - (key.length % 4)) % 4)\n  const base64 = (key + padding).replace(/-/g, '+').replace(/_/g, '/')\n\n  const rawData = window.atob(base64)\n  const outputArray: Uint8Array = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\n// main function\nexport const run = async (): Promise<boolean> => {\n  // check if serviceWorker functionality is supporter by the browser(navigator)\n  if ('serviceWorker' in navigator) {\n    try {\n      console.log('Registering service worker')\n      // registering script 'worker.js' as processor for notifications (as service worker)\n      const registration = await navigator.serviceWorker.register(\n        // PUBLIC_URL => 'public' folder\n        `${process.env.PUBLIC_URL}/worker.js`,\n        { scope: '/' }\n      )\n      //  unsubscribe from old subscription, should not be needed\n      const current = await registration.pushManager.getSubscription()\n      if (current) await current.unsubscribe()\n\n      // make object for subscription\n      const subObject = {\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicKey)\n      }\n      // show object\n      const subscription = await registration.pushManager.subscribe(subObject)\n      console.log('Registered push')\n\n      console.log('Sending push')\n      // send request to server\n      await axios.post(\n        'http://localhost:3000/api/subscribe',\n        subscription,\n        {\n          headers: {\n            'content-type': 'application/json'\n          }\n        }\n      )\n      console.log('Sent push to server')\n    } catch (e) {\n      // display error from server\n      console.log(e)\n      if (e.response && e.response.data) console.log(e.response.data)\n    }\n    return true\n  }\n  return false\n}\n\nexport const alert = async (): Promise<boolean> => {\n  // get current service worker registration data\n  const currentReg = await navigator.serviceWorker.getRegistration()\n  // get subscription details\n  const currentSub = currentReg\n    ? await currentReg.pushManager.getSubscription()\n    : ''\n  // send request to server\n  if (currentSub) {\n    await axios.post('http://localhost:3000/api/alert', currentSub, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n    return true\n  }\n  return false\n}\n","import React from \"react\"\nimport \"./App.css\"\nimport { alert } from \"./service\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <button className=\"button\" onClick={() => alert()}>\n        Alert\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { run } from './service';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// run service worker\nrun();"],"sourceRoot":""}