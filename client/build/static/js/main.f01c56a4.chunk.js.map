{"version":3,"sources":["logo.svg","App.tsx","service.ts","index.tsx"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","urlBase64ToUint8Array","key","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","run","a","navigator","console","log","serviceWorker","register","process","scope","registration","pushManager","getSubscription","current","unsubscribe","remove","subObject","userVisibleOnly","applicationServerKey","subscribe","subscription","axios","post","headers","response","data","ReactDOM","render","document","getElementById"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,mLCyB5BC,G,MArBO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,mB,yCCJFC,EAAwB,SAACC,GAO7B,IANA,IACMC,GAAUD,EADA,IAAIE,QAAQ,EAAKF,EAAIG,OAAS,GAAM,IACrBC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAE1DC,EAAUC,OAAOC,KAAKN,GACtBO,EAAc,IAAIC,WAAWJ,EAAQF,QAElCO,EAAI,EAAGA,EAAIL,EAAQF,SAAUO,EACpCF,EAAYE,GAAKL,EAAQM,WAAWD,GAEtC,OAAOF,GAOII,EAAG,sCAAG,oCAAAC,EAAA,0DAEb,kBAAmBC,WAFN,iCAIbC,QAAQC,IAAI,8BAJC,SAMcF,UAAUG,cAAcC,SAAxB,UAEtBC,GAFsB,cAGzB,CAAEC,MAAO,MATE,cAMPC,EANO,OAWbN,QAAQC,IAAI,6BACZD,QAAQC,IAAI,oBAZC,UAaSK,EAAaC,YAAYC,kBAblC,aAaPC,EAbO,0CAgBUA,EAAQC,cAhBlB,QAgBLC,EAhBK,OAiBXX,QAAQC,IAAIU,GAjBD,eAmBbX,QAAQC,IAAIQ,GAENG,EAAY,CAChBC,iBAAiB,EACjBC,qBAAsB9B,EA1C5B,4FA4CIgB,QAAQC,IAAIW,GAzBC,UA0BcN,EAAaC,YAAYQ,UAAUH,GA1BjD,eA0BPI,EA1BO,OA2BbhB,QAAQC,IAAI,mBAEZD,QAAQC,IAAI,gBA7BC,UA+BPgB,IAAMC,KAAK,sCAAuCF,EAAc,CACpEG,QAAS,CACP,eAAgB,sBAjCP,QAoCbnB,QAAQC,IAAI,uBApCC,kDAuCbD,QAAQC,IAAR,MACAD,QAAQC,IAAI,KAAEmB,SAASC,MAxCV,wDAAH,qDClBhBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAMjD5B,M","file":"static/js/main.f01c56a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\n\n// public key should be from .env\nconst oldKey =\n  \"BOynOrGhgkj8Bfk4hsFENAQYbnqqLSigUUkCNaBsAmNuH6U9EWywR1JIdxBVQOPDbIuTaj0tVAQbczNLkC5zftw\";\nconst publicKey =\n  \"BDobnNEiUBJkBUeIYLW3JDyKsCQRHPLYnVqr11XJl5DWPgZhSF0q5FDygK1YEjBTOTiN_gLyEbMWnRVAvKfsi78\";\n\nconst urlBase64ToUint8Array = (key: string) => {\n  const padding = \"=\".repeat((4 - (key.length % 4)) % 4);\n  const base64 = (key + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\n// const vapidPublicKey = \"<Your Public Key from generateVAPIDKeys()>\";\n// const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n\n// main function\nexport const run = async () => {\n  // check if serviceWorker functionality is supporter by the browser(navigator)\n  if (\"serviceWorker\" in navigator) {\n    try {\n      console.log(\"Registering service worker\");\n      // registering script 'worker.js' as processor for notifications (as service worker)\n      const registration = await navigator.serviceWorker.register(\n        // PUBLIC_URL => 'public' folder\n        `${process.env.PUBLIC_URL}/worker.js`,\n        { scope: \"/\" }\n      );\n      console.log(\"Registered service worker\");\n      console.log(\"Registering push\");\n      const current = await registration.pushManager.getSubscription();\n\n      if (current) {\n        const remove = await current.unsubscribe();\n        console.log(remove);\n      }\n      console.log(current);\n\n      const subObject = {\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicKey)\n      };\n      console.log(subObject)\n      const subscription = await registration.pushManager.subscribe(subObject);\n      console.log(\"Registered push\");\n\n      console.log(\"Sending push\");\n      // send request to server\n      await axios.post(\"http://localhost:3000/api/subscribe\", subscription, {\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      });\n      console.log(\"Sent push to server\");\n    } catch (e) {\n      // display error from server\n      console.log(e);\n      console.log(e.response.data);\n    }\n  }\n};\n\n// Boilerplate borrowed from https://www.npmjs.com/package/web-push#using-vapid-key-for-applicationserverkey\n// function urlBase64ToUint8Array(base64String: any) {\n//   const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n//   const base64 = (base64String + padding)\n//     .replace(/\\-/g, \"+\")\n//     .replace(/_/g, \"/\");\n\n//   const rawData = window.atob(base64);\n//   const outputArray = new Uint8Array(rawData.length);\n\n//   for (let i = 0; i < rawData.length; ++i) {\n//     outputArray[i] = rawData.charCodeAt(i);\n//   }\n//   return outputArray;\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { run } from './service';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nrun();"],"sourceRoot":""}